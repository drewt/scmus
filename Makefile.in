.SUFFIXES:
.PHONY: clean distclean run

# variables {{{
# directories...
prefix = @prefix@
exec_prefix = @exec_prefix@
datarootdir = @datarootdir@
bindir = @bindir@
datadir = @datadir@
mandir = @mandir@

_ver0   = $(shell git rev-parse --verify --short HEAD 2>/dev/null)-git
_ver1   = @PACKAGE_VERSION@
VERSION = $(or $(_ver0),$(_ver1))

LIBS = @NCURSES_LIBS@

features-@CONFIG_WIDE_CHAR@ += -feature wide-char
features-y += -feature ncurses-mouse-v@ncurses_mouse_version@

types-cflags-$(typed) = -types all.types
types-prereq-$(typed) = all.types

# programs+flags...
CSC          = csc
TFLAGS       = -uses base -prologue src/prologue.scm $(features-y)
CFLAGS       = -fno-var-tracking-assignments
ALL_CFLAGS   = $(CFLAGS) \
	       '-DSCMUS_DIR=\"$(datadir)/scmus\"' \
               '-DVERSION=\"$(VERSION)\"'
CSCFLAGS     =
ALL_CSCFLAGS = $(CSCFLAGS) \
               $(addprefix -C , $(ALL_CFLAGS)) \
               $(TFLAGS) \
               -R coops \
               -R coops-utils
               $(types-cflags-y)
LD           = csc
LDFLAGS      =
INSTALL      = @scripts/install

# function to add object extension to a list of files
objfiles = $(foreach f,$(1),$(addprefix ./,$(addsuffix .@OBJEXT@,$(subst /,.,$(f)))))
srcfiles = $(foreach f,$(1),$(addprefix src/,$(addsuffix .scm,$(f))))

# files...
eggs     = coops coops-utils matchable regex sandbox unix-sockets utf8 vector-lib
units    = bindings-view browser-view commands library-view log-view options options-view \
           playlist-view queue-view search-view ui-curses user-api
tui_mods = $(addprefix tui/,display frame input list-box misc split-pane widget)
imodules = base client command command-line config ueval event format keys log option \
           error status track tui $(tui_mods) view widgets
omodules = getopt iter mpd-client ncurses trie ustring
modules  = $(imodules) $(omodules)
types    = $(foreach unit,$(units) $(modules),$(addsuffix .types,$(unit)))
target   = scmus@EXEEXT@

test-units = $(addprefix test/,event option iter trie ueval)

# files to delete on 'make clean'
clean = $(call objfiles,$(units) $(modules) $(test-units) main check) \
        $(addprefix drewt.,$(addsuffix .import.scm,$(subst /,.,$(omodules)))) \
        $(addprefix scmus.,$(addsuffix .import.scm,$(subst /,.,$(imodules)))) \
        $(types) $(target) all.types

all: $(target)

# variables }}}
# dependencies {{{

# BUILD dependencies
main_deps           = base client config ueval getopt log
base_deps           = config ncurses
bindings-view_deps  = base event keys ncurses error tui view widgets
browser-view_deps   = base client event ncurses option track tui view widgets
client_deps         = base event mpd-client option error status track
command-line_deps   = base event iter ncurses tui
command_deps        = base command-line error ueval event trie
commands_deps       = base client command command-line ueval keys status tui widgets
error_deps          = base command-line log
ueval_deps          = base event option error
event_deps          = base
format_deps         = base ueval error status track ustring
keys_deps           = base ueval event ncurses
library-view_deps   = base client command-line event format ncurses option track tui view widgets
log_deps            = base event
log-view_deps       = base config event log tui view widgets
option_deps         = base event
options_deps        = base event format option tui
options-view_deps   = base event ncurses option error tui view widgets
playlist-view_deps  = base client event option status track tui view widgets
queue-view_deps     = base client event option status track tui view widgets
search-view_deps    = base client format ncurses option track tui view widgets
status_deps         = base mpd-client track
track_deps          = base
ui-curses_deps      = base client command-line event format keys ncurses option error status tui \
                      view widgets
user-api_deps       = base client command command-line config ueval event format keys ncurses \
                      option status track tui view widgets
ustring_deps        = base
view_deps           = base tui keys widgets
widgets_deps        = base format ncurses option track tui
tui_deps            = $(tui_mods)
tui/display_deps    = base ncurses ustring
tui/frame_deps      = base tui/display tui/misc tui/widget
tui/input_deps      = base event ncurses tui/widget tui/misc
tui/list-box_deps   = base ncurses tui/display tui/input tui/widget
tui/misc_deps       = base ncurses tui/display tui/widget
tui/split-pane_deps = base tui/misc tui/widget
tui/widget_deps     = base tui/display

# LOAD dependencies
main_uses           = commands options ui-curses user-api
bindings-view_uses  = options
browser-view_uses   = options track
commands_uses       =
library-view_uses   = options
log-view_uses       =
options-view_uses   =
playlist-view_uses  = options
queue-view_uses     = options
search-view_uses    = options
ui-curses_uses      = bindings-view browser-view library-view log-view options options-view \
                      playlist-view queue-view search-view
user-api_uses       = ui-curses

# Everything depends on prologue
$(call objfiles,$(units) $(modules)): src/prologue.scm $(types-prereq-y)

# Test dependencies
$(call objfiles,$(test-units)): src/prologue.scm test/test.scm

# Template to create a rule building %.o from src/%.scm.  Because we are replacing '/' with '.' in
# output filenames, we can't use an implicit rule here.
define OBJECT_template =
$(call objfiles,$(1)): private ALL_CSCFLAGS += $(foreach d,$($(1)_deps) $($(1)_uses), -uses $(d))
$(call objfiles,$(1)): src/$(1).scm $(call objfiles,$($(1)_deps))
	$$(call cmd,csc)
endef

$(foreach f,$(units) $(modules) main,$(eval $(call OBJECT_template,$(f))))
$(foreach f,$(units) $(modules),$(eval $(call objfiles,$(f)): private ALL_CSCFLAGS += -unit $(f)))

# Rule template for building test objects.
define TEST_template =
$(call objfiles,$(1)): $(1).scm
	$$(call cmd,csc)
endef

$(foreach f,$(test-units) check, $(eval $(call TEST_template,$(f))))

# dependencies }}}
# rules {{{

ifeq ($(verbose),y)
  quiet =
else
  quiet = quiet_
endif

clean:
	$(if $(clean), rm -f $(clean))

distclean: clean
	$(if $(distclean), rm -f $(distclean))

run: all
	$(if $(target), ./$(target))

%.types: %.scm
	$(call cmd,types)

%.1: %.1.ronn
	$(call cmd,man)

%.3: %.3.ronn
	$(call cmd,man)

%.1.html: %.1.ronn
	$(call cmd,wman)

%.3.html: %.3.ronn
	$(call cmd,wman)

# generate roff output from ronn markdown
quiet_cmd_man   = MAN     $@
      cmd_man   = ronn --roff $(MANFLAGS) $^

# generate html output from ronn markdown
quiet_cmd_wman  = HTML    $@
      cmd_wman  = ronn --html $(MANFLAGS) $^

# scheme compile for object files
quiet_cmd_csc   = CSC     $@
      cmd_csc   = $(CSC) -c $(ALL_CSCFLAGS) -J -o $@ $<

# generate type file
quiet_cmd_types = TYPES   $@
      cmd_types = $(CSC) -c $(TFLAGS) -analyze-only -emit-type-file $@ $<

# LD for programs; optional parameter: libraries
quiet_cmd_ld    = LD      $@
      cmd_ld    = $(LD) $(LDFLAGS) -o $@ $^ $(1)

# cmd macro (taken from kbuild)
cmd = @$(if $($(quiet)cmd_$(1)),echo '  $(call $(quiet)cmd_$(1),$(2))' &&) $(call cmd_$(1),$(2))

$(target): $(call objfiles,$(units) $(modules) main)
	$(call cmd,ld,$(LIBS))

check: $(call objfiles,$(units) $(modules) $(test-units) check)
	$(call cmd,ld,$(LIBS))

all.types: $(types)
	$(call cmd,cat)

eggs:
	chicken-install $(eggs)

docs/man/scmus.1 docs/man/scmus.1.html: private MANFLAGS += --manual="General Commands Manual"
docs/man/scmus.3 docs/man/scmus.3.html: private MANFLAGS += --manual="scmus Scripting Reference"

man: docs/man/scmus.1 docs/man/scmus.3
web: docs/man/scmus.1.html docs/man/scmus.3.html

install: all
	$(INSTALL) -m755 $(bindir) scmus
	$(INSTALL) -m644 $(datadir)/scmus data/scmusrc.scm
	$(INSTALL) -m644 $(datadir)/scmus/colors $(wildcard data/colors/*)
	$(INSTALL) -m644 $(mandir)/man1 docs/man/scmus.1
	$(INSTALL) -m644 $(mandir)/man3 docs/man/scmus.3

# rules }}}
